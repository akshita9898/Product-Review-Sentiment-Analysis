# -*- coding: utf-8 -*-
"""sentiment_analysis

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1sqG7m1rdNLSvC3aUQssh25_osQKY3Hxy
"""

import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score, classification_report

# Sample Product Reviews Dataset (Improved)
data = {
    'Review': [
        'Great product, I loved it!',
        'Terrible quality, not worth the money.',
        'Satisfied with the product.',
        'Worst experience ever.',
        'Highly recommend this to everyone.',
        'The product is okay, nothing special.',
        'Very bad, do not buy!',
        'Amazing quality and fast delivery!',
        'Not as expected, average product.',
        'Excellent performance and value for money.',
        'Bad product, not recommended.',
        'Good quality, highly satisfied.',
        'Poor experience, waste of money.',
        'Absolutely terrible service.',
        'Fantastic and useful product.',
        'Worst product I have ever used.',
        'Loved it, great value!',
        'Very bad experience, I will not buy again.',
        'Exceptional product, highly recommend!',
        'Horrible, do not purchase!'
    ],
    'Sentiment': [
        'Positive', 'Negative', 'Positive', 'Negative', 'Positive', 'Neutral', 'Negative',
        'Positive', 'Neutral', 'Positive', 'Negative', 'Positive', 'Negative', 'Negative',
        'Positive', 'Negative', 'Positive', 'Negative', 'Positive', 'Negative'
    ]
}

# Create DataFrame
df = pd.DataFrame(data)

# Convert target labels
df['Sentiment'] = df['Sentiment'].map({'Positive': 1, 'Negative': 0, 'Neutral': 2})

# Feature Extraction using TF-IDF
tfidf = TfidfVectorizer()
X = tfidf.fit_transform(df['Review']).toarray()
y = df['Sentiment']

# Train-test split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Build Logistic Regression Model
model = LogisticRegression(max_iter=1000)
model.fit(X_train, y_train)

# Evaluate Model
y_pred = model.predict(X_test)
accuracy = accuracy_score(y_test, y_pred)
print(f"Model Accuracy: {accuracy:.2f}")
print("\nClassification Report:\n", classification_report(y_test, y_pred))

# Sentiment Mapping
sentiment_map = {1: 'Positive', 0: 'Negative', 2: 'Neutral'}

# User Input for Real-Time Prediction
while True:
    user_review = input("\nEnter your product review (or type 'exit' to quit): ")
    if user_review.lower() == 'exit':
        break
    user_review_vector = tfidf.transform([user_review]).toarray()
    predicted_sentiment = model.predict(user_review_vector)[0]
    print(f"Predicted Sentiment: {sentiment_map[predicted_sentiment]}")